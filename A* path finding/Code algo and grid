import pygame
import math
from queue import PriorityQueue

WIDTH = 900 # width of the screen and the height
WIN = pygame.display.set_mode((WIDTH,WIDTH)) # to make a window (pygame function)
pygame.display.set_caption("A* Path Finding ALGORITHM")

Red = (255,0,100)             #displaying all in RGB colors
Green = (0,255,0)
Blue = (0,0,255)
Yellow = (255,255,0)
White = (255,255,255)
Black = (0,0,0)
Purple = (128,0,128)
Orange = (255,165,0)
Grey = (128,128,128)
Turquoise = (64,224,200)

class Node: # class for each Node in grid
    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = White
        self.neighbours = []
        self.width = width
        self.total_rows = total_rows


                            # all the functions below are to check states of nodes

    def get_pos(self): # function to check position of Node
        return self.row, self.col

    def is_closed(self): # function to see if Node is already traversed
        return self.color == Red

    def is_open(self): # function to see if Node is available for traversing
        return self.color == Green

    def is_barrier(self): # to check maze barriers
        return self.color == Black

    def is_start(self): # to check start point
        return self.color == Orange

    def is_end(self): # to check end point
        return self.color == Blue


                                # all the functions below are to change states of nodes

    def reset(self): # to reset grid
        self.color = White

    def make_closed(self):
        self.color = Red

    def make_open(self):
        self.color = Green

    def make_barrier(self):
        self.color = Black

    def make_start(self):
        self.color = Orange

    def make_end(self):
        self.color = Blue

    def make_path(self):
        self.color = Purple

    # draw rectangle of desired color for nodes
    def draw(self,win):
        pygame.draw.rect(win,self.color,(self.x, self.y, self.width, self.width))


    def update_neighbours(self,grid):
        self.neighbours = []
        if self.row < self.total_rows - 1 and not grid[self.row + 1] [self.col].is_barrier(): #to check for available neighbours DOWN
            self.neighbours.append(grid[self.row + 1][self.col])

        if self.row > 0 and not grid[self.row - 1][self.col].is_barrier():  #to check for available neighbours UP
            self.neighbours.append(grid[self.row - 1][self.col])

        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier():  #to check for available neighbours RIGHT
            self.neighbours.append(grid[self.row][self.col + 1])

        if self.col > 0 and not grid[self.row][self.col - 1].is_barrier():  # #to check for available neighbours LEFT
            self.neighbours.append(grid[self.row][self.col - 1])

    # to compare f_values of neighbours and choose the smallest
    def __lt__(self,other):
        return False

# h_values the distance to the end, here the difference in co-ordinates in used for dist calculation
def h(p1,p2):
    x1, y1 = p1
    x2, y2 = p2
    return abs(x1 - x2) + abs(y1 - y2)

def reconstruct_path(came_from, current, draw):
    while current in came_from: #use came from dictionary to check for path
        current = came_from[current] # take the node from which just added to dictionary of came_from and make it current to call the make_path function
        current.make_path()
        draw() # draw the colored path from boxed

def algorithm(draw, grid, start, end): #A* path algorithm
    count = 0
    open_set = PriorityQueue()  # used to prioritize nodes with lowest f_scores first
    open_set.put((0, count, start))  # initializing f score to 0 and count and start block
    came_from = {}  # dictionary data structure for remembering which node it came from
    g_score = {spot: float("inf") for row in grid for spot in row}  # g score distance the start block
    g_score[start] = 0
    f_score = {spot: float("inf") for row in grid for spot in row}  # f score is the addition of g score and h score
    f_score[start] = h(start.get_pos(), end.get_pos())  # initially f_score is equal to h score to the end position

    open_set_hash = {start}  # to check if a node is already in the queue open set hash is used here we added start block to it

    while not open_set.empty(): # if open node does not exist then quit
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()

        current = open_set.get()[2] # indexing at 2 because it stores the node at 2
        open_set_hash.remove(current) # remove the node from hash to sync it with the open set queue

        if current == end: # for making the shortest path visible
            reconstruct_path(came_from, end, draw)
            end.make_end() # to make end block visible
            start.make_start()

            return True

        for neighbour in current.neighbours:
            temp_g_score = g_score[current] + 1 # to check g score of neighbour and increment by 1 as moving 1 block equal 1 distance

            if temp_g_score < g_score[neighbour]: # if found a better path
                came_from[neighbour] = current # make current node to came from list
                g_score[neighbour] = temp_g_score # add it to g_score list
                f_score[neighbour] = temp_g_score + h(neighbour.get_pos(),end.get_pos()) # add it to f_score list by adding g and h
                if neighbour not in open_set_hash:
                    count += 1 # if not in open set hash then add it and increase count
                    open_set.put((f_score[neighbour],count, neighbour))
                    open_set_hash.add(neighbour)
                    neighbour.make_open() # turn color to GREEN to show availability of node

        draw()
        if current != start:
            current.make_closed() # for all the nodes which has been traversed turn them RED

    return False

# to calculate  grid lines position and add in a list
def make_grid(rows, width):
    grid = []
    gap = width // rows
    for i in range(rows):
        grid.append([])
        for j in range(rows):
            node = Node(i, j, gap, rows)
            grid[i].append(node)

    return grid

# to draw grid
def draw_grid(win, rows, width):
    gap = width // rows
    for i in range(rows):
        pygame.draw.line(win,Grey, (0, i*gap), (width, i*gap))

        for j in range(rows):
            pygame.draw.line(win, Grey, (j * gap, 0), (j * gap, width))

# combining the draw window and grid function and updating it to make it a running video game like
def draw(win, grid, rows, width):
    win.fill(White)

    for row in grid:
        for node in row:
            node.draw(win)

    draw_grid(win, rows, width)
    pygame.display.update()

# to get mouse click position
def get_click_pos(pos, rows, width):
    gap = width // rows
    y, x = pos

    row = y // gap
    col = x // gap
    return row, col

# the main run function with quit,

def main(win, width):
    ROWS = 40
    grid = make_grid(ROWS, width)

    start = None
    end = None

    run = True
    while run:
        draw(win, grid, ROWS, width)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:       # quit window check
                run = False

            if pygame.mouse.get_pressed()[0]: # LEFT mouse button for placement of features
                pos = pygame.mouse.get_pos() # builtin func of pygame lib to get mouse position
                row, col = get_click_pos(pos, ROWS, width) # helper func to convert it into row col co-ordinates
                node = grid[row][col] # append it in the list of nodes with their respective grid position

                if not start and node != end:
                    start = node # to make start block first
                    start.make_start()

                elif not end and node != start:
                    end = node # to make end block after that
                    end.make_end()

                elif node != end and node != start:
                    node.make_barrier() # to make maze barriers

            elif pygame.mouse.get_pressed()[2]:  # RIGHT mouse button for removal of features
                pos = pygame.mouse.get_pos() # same as left mouse button
                row, col = get_click_pos(pos, ROWS, width)
                node = grid[row][col]
                node.reset() # for resetting nodes to white
                if node == start:
                    start = None
                elif node == end:
                    end = None

            if event.type == pygame.KEYDOWN: # for starting the algorithm and updating neighbours
                if event.key == pygame.K_SPACE and start and end:
                    for row in grid:   # for each node of every row of every grid
                        for node in row:
                            node.update_neighbours(grid)

                    algorithm(lambda: draw(win, grid, ROWS, width), grid, start, end)

                if event.key == pygame.K_c: # for clearing the screen
                    start = None
                    end = None
                    grid = make_grid(ROWS, width)
    pygame.quit()

main(WIN, WIDTH)
























